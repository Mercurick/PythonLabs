"""
ВАРИАНТ 18
С клавиатуры вводится два числа K и N. Квадратная матрица А(N,N), состоящая из 4-х равных по размерам подматриц, B,C,D,E
заполняется случайным образом целыми числами в интервале [-10,10]. Для отладки использовать не случайное заполнение, а целенаправленное.
Вид матрицы А: B - 11, C - 12, D - 21, E - 22.

Для простоты все индексы в подматрицах относительные.
По сформированной матрице F (или ее частям) необходимо вывести не менее 3 разных графиков.
Программа должна использовать функции библиотек numpy  и mathplotlib

ЗАДАНИЕ:
Формируется матрица F следующим образом: скопировать в нее А и  если в С количество чисел, больших К в нечетных столбцах,
чем произведение чисел в нечетных строках, то поменять местами С и В симметрично, иначе С и Е поменять местами несимметрично.
При этом матрица А не меняется. После чего если определитель матрицы А больше суммы диагональных элементов матрицы F, то
вычисляется выражение: A*AT – K * F-1, иначе вычисляется выражение (A-1 +G-FТ)*K, где G-нижняя треугольная матрица, полученная из А.
Выводятся по мере формирования А, F и все матричные операции последовательно.
"""

import numpy as np
import matplotlib.pyplot as plt

def generate_matrix(N):
    """
    Генерация матрицы А(N,N) с случайными значениями от -10 до 10
    """
    return np.random.randint(-10, 11, size=(N, N))

def fill_matrix(A, B, C, D, E):
    """
    Заполнение матрицы F
    """
    F = np.copy(A)  # Копирование матрицы А в F
    """
    Проверка условий и замена подматриц
    """
    if np.count_nonzero(C > K) > np.prod(np.prod(A[1::2, :], axis=1)):
        F[:, [1, 2]] = F[:, [2, 1]]  # Симметричная замена С и В
    else:
        F[:, [1, 3]] = F[:, [3, 1]]  # Несимметричная замена С и Е
    return F

def compute_expression(A, F, K):
    if np.linalg.det(A) > np.sum(np.diagonal(F)):
        expression = np.dot(A, A.T) - K * np.linalg.inv(F)
    else:
        G = np.tril(A)  # Нижняя треугольная матрица из А
        expression = (np.linalg.inv(A) + G - F.T) * K
    return expression

"""
Ввод размера матрицы и значения K
"""
N = int(input("Введите размер матрицы N: "))
K = int(input("Введите значение K: "))

"""
Генерация матрицы А
"""
A = generate_matrix(N)
print("Матрица A:")
print(A)

"""
Формирование подматриц B, C, D, E
"""
B = A[:N//2, :N//2]
C = A[:N//2, N//2:]
D = A[N//2:, :N//2]
E = A[N//2:, N//2:]

"""
Заполнение матрицы F и вычисление выражения
"""
F = fill_matrix(A, B, C, D, E)
expression = compute_expression(A, F, K)

"""
Вывод результатов
"""
print("Матрица F:")
print(F)
print("Результат вычисления выражения:")
print(expression)

""" 
матрицы F
"""
plt.imshow(F, cmap='viridis')
plt.colorbar()
plt.title("Матрица F")
plt.show()

""" 
Гистограмма распределения значений элементов матрицы F
"""
plt.hist(F.flatten(), bins=20, color='skyblue', edgecolor='black')
plt.title('Распределение значений элементов матрицы F')
plt.xlabel('Значение элемента')
plt.ylabel('Частота')
plt.grid(True)
plt.show()

""" 
График зависимости значений элементов одной строки от их индексов
"""
plt.plot(F[0, :], marker='o', linestyle='-', color='orange')
plt.title('Зависимость значений элементов первой строки матрицы F от их индексов')
plt.xlabel('Индекс элемента')
plt.ylabel('Значение элемента')
plt.grid(True)
plt.show()